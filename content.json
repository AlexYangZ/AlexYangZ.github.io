{"pages":[],"posts":[{"title":"Hexo Blog 搭建教程","text":"很久之前学习的这个博客框架搭建了,现在拿来用都已经忘光了.大概总结一下免得到时候忘记又得在网上找资料重新来过. 一.安装环境准备: 下载安装node.js iterm:sudo su切换到root用户 安装hexo 博客框架 Npm install -g cnpm --registry=https://registry.npm.taobao.org Cnpm install -g hexo-cli Hexo -v Pwd Mkdir blog Cd blog/ Pwd Sudo hexo init Hexo start/server. Blog 预览二.新建文章 Hexo new“我的第一篇博客文章” cd到相应目录下 vim 文章 基于markdown格式语法写文章 --- ##第一章 内容 --- ##第二章 内容 --- ## 参考文献 :wq Cd ../.. Hexo clean Hexo g Hexo s三.部署到github上 登录GitHub new repository :昵称.github.io Create Iterm:目录下安装git部署插件-npm install --save hexo-deployer-git ll设置 Vim -config.yml #deployment Deploy: type:git Repo: Branch: master Hexo d https://alexyangz.github.io/ 更换主题: blog目录下 下载主题Git clone url1. themes/yille 配置-config.yml ![lovely](/images/1.11.jpg)","link":"/2019/12/30/Hexo-Blog-搭建教程/"},{"title":"ACTION PLAN","text":"一五计划 学历封顶.有车有房. 2020年 1.每个月肯一部技术书籍的大部头,并写博客总结.2.到4月底能够单独接项目做兼职.3.做事有计划,事后有总结,及时复盘.4.雅思考个较高的分数.5.每天阅读一篇英文文章.6.完美英音.7.德语阅读文章无障碍.8.每周更新技术博客.","link":"/2020/01/01/ACTION-PLAN/"},{"title":"C++GettingStarted1","text":"1.当main函数return回的是-1时echo #?状态是255;当main函数return回的是0时echo #?状态是0.g++ -o pro1 pro1.cc alexyang@bogon  ~/Desktop/C++Learn  vim pro1.cc  ✔  461  22: 30:28alexyang@bogon  ~/Desktop/C++Learn  ls  ✔  462  22 :32:50 pro1.cc alexyang@bogon  ~/Desktop/C++Learn  cc pro1.cc  ✔  463  22 :33:06alexyang@bogon  ~/Desktop/C++Learn  ls  ✔  464  22 :33:25a.out pro1.ccalexyang@bogon  ~/Desktop/C++Learn  ./a.out  ✔  465  22 :33:31alexyang@bogon  ~/Desktop/C++Learn  echo $?  ✔  466  22 :34:130alexyang@bogon  ~/Desktop/C++Learn  g++ -o pro1 pro1.cc alexyang@bogon  ~/Desktop/C++Learn  ls  ✔  483  22:44:39a.out pro1 pro1.cc alexyang@bogon  ~/Desktop/C++Learn  ./pro1  ✔  484  22:45:14 alexyang@bogon  ~/Desktop/C++Learn  echo $?  ✔  485  22:45:340 alexyang@bogon  ~/Desktop/C++Learn  vim pro1  ✔  486  22:45:59 alexyang@bogon  ~/Desktop/C++Learn  vim pro1.cc  ✔  487  22:46:54 alexyang@bogon  ~/Desktop/C++Learn  g++ -o pro1 pro1.cc pro1.cc:3:2: error: use of undeclared identifier &apos;std&apos; 26 std::cout &lt;&lt; &quot;Hello, World!&quot;&lt;&lt; std::endl; 27 ^ pro1.cc:3:33: error: use of undeclared identifier &apos;std&apos; std::cout &lt;&lt; &quot;Hello, World!&quot;&lt;&lt; std::endl; ^ 2 errors generated. alexyang@bogon  ~/Desktop/C++Learn  vim pro1.cc  1 ↵  489  22:50:23 alexyang@bogon  ~/Desktop/C++Learn  g++ -o pro1 pro1.cc alexyang@bogon  ~/Desktop/C++Learn  ./pro1  ✔  491  22:52:18 Hello, World! alexyang@bogon  ~/Desktop/C++Learn  echo $?  ✔  492  22:52:26 0 alexyang@bogon  ~/Desktop/C++Learn  vim pro1.cc  ✔  493  22:52:52 alexyang@bogon  ~/Desktop/C++Learn  g++ -o pro1 pro1.cc alexyang@bogon  ~/Desktop/C++Learn  ./pro1  ✔  495  22:54:06 Hello, World! alexyang@bogon  ~/Desktop/C++Learn  echo $?  255 ↵  496  22:54:21 255##2. ###1.Writing std::cout uses the scope operator (the :: operator) to say that we want to use the name cout that is defined in the namespace std. ###2.The input operator (the &gt;&gt; operator) behaves analogously to the output operator. Some Words : asterisk italicize indent ###3.Reading an Unkown Number of Input while (std::cin &gt;&gt; value) On Windows systems we enter an end-of-file by typing a control-z–hold down the Ctrl key and press z–followed by hittingeither the Enter or Return key. On UNIX systems, including on Mac OS X machines, end-of-file is usually control-d. ###4.Headers from the standard library are enclosed in angle brackets (&lt; &gt;). Those that are not part of the library are enclosed in double quotes(“ “). ###5.Member functions are sometimes referred to as methods. ###6. $ addItems outfile Assuming $ is the system prompt and our addition program has been compiled into an executablefile named addItems.exe(or addItems on UNIX systems), this command will read transactions from a file named infile and write its output to a file named outfile in the current directory. #include &lt;iostream&gt; #include &quot;Sales_item.h&quot; #include &lt;iostream&gt; #include &quot;Sales_item.h&quot; #include &lt;iostream&gt; #include &quot;Sales_item.h&quot; #include &lt;iostream&gt; #include &quot;Sales_item.h&quot; int main() { Sales_item total; // variable to hold data for the next transaction // read the first transaction and ensure that there are data to process if (std::cin &gt;&gt; total) { Sales_item trans; // variable to hold the running sum // read and process the remaining transactions while (std::cin &gt;&gt; trans) { // if we&apos;re still processing the same book if (total.isbn() == trans.isbn()) total += trans; // update the running total else { // print results for the previous book std::cout &lt;&lt; total &lt;&lt; std::endl; total = trans; // total now refers to the next book } } std::cout &lt;&lt; total &lt;&lt; std::endl; // print the last transaction } else { // no input! warn the user std::cerr &lt;&lt; &quot;No data?!&quot; &lt;&lt; std::endl; return -1; // indicate failure } return 0; }Vim多行缩进技巧:按v进入visual状态，选择多行，用&gt;或&lt;缩进或缩出在使用vim时，当我们以普通用户去打开一个只有root用户才有权限操作的文件时，我们编辑完成之后，正要保存，却发现，这个文件我们没有权限修改。解决方案：底行命令模式执行：:w !sudo tee %上述方式非常完美的解决了不能保存只读文件的问题，但毕竟命令还是有些长，为了避免每次输入一长串的命令，可以将它映射为一个简单的命令加到 .vimrc 中：“ Allow saving of files as sudo when I forgot to start vim using sudo.cmap w!! w !sudo tee &gt; /dev/null %这样，简单的运行:w!!即可。命令后半部分&gt; /dev/null作用为显式的丢掉标准输出的内容。","link":"/2020/02/06/C-GettingStarted1/"},{"title":"小笔记,小心得","text":"躬身入局法国作家 加缪:请不要跟在我后面,因为我可能不会引路;也不要走在我的前面因为我可能不会跟随;请走在我的旁边做我的朋友.","link":"/2020/01/16/小笔记-小心得/"},{"title":"vim笔记","text":"Visual(可视)模式Visual模式一般用来块状选择文本◆Normal模式下使用v进入visual选择◆使用V选择行◆使用ctrl+v进行方块选择 网络.上很多vim的资源,甚至练习的小游戏◆《Practical vim》◆《笨方法学 vimscript》◆学习和开发自己的插件 Command(命令)模式Normal模式下输入:之后执行命令，比如保存退出:wq 一气呵成◆顾名思义，执行Vim命令,比如保存:w,退出:q◆比如分屏:vs (vertical split), :sp(split)◆比如使用:% s/foo/bar/g全局替换/单词 搜索. Y复制p粘贴 代码就像人生，总是经常出错,需要我们快速修正◆进入Vim之后首先使用a/i/o之一进入插入模式◆ctrl+h 删除上一个字符, ctrl+w删除上一个单词, ctrl+ u删除当前行gi快速跳转到最后一次编辑的地方并进入插入模式 在单词之间厂飞舞」在单词之间移动是我们浏览操作中最常使用的命令◆w/W移到下一个word/WORD开头。e/E 下一个word/WORD尾◆b/B回到上一个word/WORD开头,可以理解为backword◆ word指的是以非空白符分割的单词, WORD以空白符分割的单词 行间搜索移动同一行快速移动的方式其实是搜索一个字符并且移动到该字符◆使用f{char}可以移动到char字符上, t移动到char的前一个字符◆如果第一次没搜到,可以用分号(;)/逗号(,)继续搜该行下一个/上一个◆大写的F表示反过来搜前面的字符 Vim水平移动如何快速移动到一行的行首或者行尾呢?◆0移动到行首第一个字符，^移动到第一个非空白字符◆$移动到行尾，g_移动到行尾非空白字符◆记住常用的0和$就可以满足日常需求了 Vim垂直移动我们还可以在句子(sentence)和段落(paragraph)间移动(不常用)◆使用括号( )在句子间移动,你可以用:help (来查看帮助◆使用{}在段落之间移动◆插件章节我们会讲如何用easy一motion插件移动 ,这些命令就都不用记忆啦 Vim页面移动翻页命令太多, 2/8定律,记住常见的就能满足需求◆gg/G移动到文件开头和结尾,你可以使用ctrl+o快速返回◆H/M/L跳转到屏幕的开头(Head) ,中间(Middle)和结尾(L ower)◆Ctrl+u. ctrl+f.上”下翻页. (upword/forward)。zz 把屏幕置为中间 Vim快速删除如何快速删除一个字符或者单词呢?◆Vim在normal模式下使用x快速删除一个字符◆使用d (delete)配合文本对象快速删除一个单词 daw (d aroundword) diw dw dd dt) d0 d$◆d和x都可以搭配数字来执行多次 Vim快速修改相比删除,更常用修改,一般是删除之后改成我们期望的文本◆常用有三个, r (replace) , c (change) , s(substitute)亦可和数字界和使用normal模式下使用r可以替换一个字符。s替换并进入插入模式使用c配合文本对象,我们可以快速进行修改.caw.R直接往下不断替换字符.S整行删除进入插入模式.C整行删除进入插入模式 caw ct)插入模式小技巧Ctl +h/w回退字符/单词 Vim查询查询单词也是一个常用操作◆使用/或者?进行前向或者反向搜索 :set hls将搜索结果高亮 :set incsearch增量搜索:边搜索边进行高亮◆使用n/N跳转到下一个或者上一个匹配◆使用*或者#进行当前单词的前向和后向匹配 Vim替换命令substitute命令允许我们查找并且替换掉文本,并且支持正则式◆:[range]s[ubstitute]/{pattern}/{string}/[flags]◆range表示范围比如:10, 20表示10一20行，%表示全部◆pattern是要替换的模式, string是替换后文本 替换标志位Flags有几个常用的标志◆g(globa)表示全局范围内执行◆c(confirm)表示确认 ,可以确认或者拒绝修改◆n(number)报告匹配到的次数而不替换,可以用来查询匹配次数. :1,6 s/self//n :% s/&lt;quack&gt;/jiao/g 精确替换。 正则表达式U :undo. Ctl +r: Buffer Window Tab我们先来介绍几个多文件操作相关的概念◆Buffer是指打开的一个文件的内存缓冲区◆窗口是Buffer可视化的分割区域◆Tab 可以组织窗口为一个工作区 Buffer一什么是缓冲区?◆Vim 打开一个文件后会加载文件内容到缓冲区,之 后的修改都是针对内存中的缓冲区,并不会直接保存到文件,直到我们执行:w (write)的时候才会把修改内容写入到文件里 Buffer切换那如何在buffer之间切换呢?◆使用:Is会列举当前缓冲区,然后使用:b n跳转到第n个缓冲区◆ :bpre :bnext :bfirst :blast◆或者用:b buffer_name加上tab补全来跳转 :e b.txt :vs d.txt:ls 查看缓冲区。 :b 1跳转a文件进行编辑 Window窗口窗口是可视化的分割区域◆一个缓冲区可以分割成多个窗口,每个窗口也可以打开不同缓冲区◆&lt;Ctrl+w&gt;s 水平分割，&lt;Ctrl+w&gt;v 垂直分割。或者:sp 和:vs◆每个窗口可以继续被无限分割(看你屏幕是否够大) 如何切换窗口切换窗口的命令都是使用Ctrl+ w (window)作为前缀命令用途&lt;C一W&gt;W在窗口间循环切换&lt;C 一W&gt;h切换到左边的窗口&lt;C一W&gt; j切换到下边的窗口&lt;C一w&gt;k切换到上边的窗口&lt;C 一W&gt;l L. 移动窗口切换到右边的窗口 如何重排窗口?重排窗口可以改变窗口的大小:h window一resize查看文档&lt;C一W&gt;= 使所有窗口等宽、等高&lt;C一W&gt;_ 最大化活动窗口的高度&lt;C一W&gt; 最大化活动窗口的宽度[N]&lt;C一W&gt; 把活动窗口的高度设为[N]行[N]&lt;C一w&gt;| 把活动窗口的宽度设为[N]列 Tab(标签页)将窗口分组Tab是可以容纳一系列窗口的容器(:h tabpage)◆Vim的Tab和其他编辑器不太一样,可以想象成Linux的虚拟桌面◆比如一个Tab全用来编辑Python文件, 一个Tab全是HTML文件◆相比窗口, Tab一般用的比较少, Tab太多管理起来也比较麻烦 Tab(标签页)操作Tab使用不多,简单了解一下常用操作就好命令用途: tabe[dit] {filename}在新标签页中打开{filename}&lt;C 一W&gt;T把当前窗口移到一个新标签页. : tabc [lose ]关闭当前标签页及其中的所有窗口tabo [nly]只保留活动标签页，关闭所有其他标签页Tab(标签页)切换操作如何切换不同的标签页, 一般建立两个就好,太多不好操作Ex命令普通模式命令用途: tabn[ext] {N}{N}gt切换到编号为{N}的标签页: tabn [ext]gt切换到下一标签页tabp [revious]gT切换到上一标签页:tabnew duck.py◆窗口分割可以非常方便地查看代码,比如查看整个调用链◆延伸 :插件篇我们会配合ctrlp插件和nerdtree快速操作多个文件 Text Object(文本对象)如果你学过主流的编程语言, 一定知道面向对象编程◆Vim里文本也有对象的概念,比如一个单词，一段句子,一个段落◆很多其他编辑器经常 只能操作单个字符来修改文本,比较低效◆通过操作文本对象来修改要比只操作单个字符高效 文本对象操作方式之前我们已经使用过文本对象了,回忆下dw (删除一个单词)◆[number]&lt; command&gt; [text object]◆number 表示次数, command是命令,d(elete), c(hange), y(yank)◆text object是要操作的文本对象,比如单词w ,句子s ,段落p . 通过示例来学习iw表示inner word.如果键入viw命令，那么首先v将进入选择模式，然后iw将选中当前单词。aw表示around word,它不但会选中当前单词，还会包含当前单词之后的空格。以下实例中的红色[ ]表示作用范围:iwThis is a [test] sentence.awThis is a [test ]sentence.iWThis is a [..test..] sentence.aWThis is a [..test… ]sentence. 通过示例来学习i( or i) 1([2 + 3])a(ora) 1 *[(2 + 3)]. 包含圆括号本身 课后练习摆脱低效的字符操作,使用文本对象提升效率◆回忆下如何删除一个单词 ?◆在你的Vim中尝试使用文本对象快速增,删,改一个单词◆延伸:有些插件扩展了文本对象,比如vim一go可以使用f表示一个函数 Vim Normal模式复制粘贴初学者会感觉Vim复制粘贴比较奇怪,先从normal模式学习◆ normal模式下复制粘贴分别使用y (yank)和p (put) ,剪贴d和p◆我们可以使用v(visual)命 令选中所要复制的地方,然后使用p粘贴◆配合文本对象:比如使用yiw复制一个单词, yy复制一行Vim里的剪贴(cut)复制(copy)粘贴(paste)分别是delete/yank/put Insert模式下的复制粘贴很多人会使用鼠标进行选中,然后使用ctrl+v或者cmd +v粘贴◆这个和其他的文本编辑器差不多,但是粘贴代码有个坑◆很多人在vimrc中设置了autoindent ,粘贴Python代码缩进错乱◆这个时候需要使用:set paste和:set nopaste解决 什么是Vim的寄存器?你有没有好奇? Vim在normal模式下复制/剪贴的内容去了哪?◆Vim里操作的是寄存器而不是系统剪贴板,这和其他编辑器不同◆默认我们使用d删除或者y复制的内容都放到了“无名寄存器”◆用x删除一个字符放到无名寄存器,然后p粘贴,可以调换俩字符 深入寄存器(register)Vim不使用单一剪贴板进行剪贴、复制与粘贴,而是多组寄存器◆通过”{register}前缀可以指定寄存器,不指定默认用无名寄存器◆比如使用 ”ayiw复制一个单词到寄存器a中，”bdd删除当前行到寄存器b中◆Vim中””表示无名寄存器,缺省使用。 “” p其实就等同p“ayy:reg aRegisters 一一“a If the implenentation is hard to explain, it’s a bad idea,AJ“byy:reg bRegisters 一一“b If the implementation is easy to explain, it may be a good idea.AJPress ENTER or type “ap 引用a寄存器内容并粘贴 其他常见寄存器除了有名寄存器a一z, Vim中还有一些其他常见寄存器◆复制专用寄存器”0 使用y复制文本同时不仅会复制到无名寄存器还会被拷到复制寄存器0◆系统剪贴板 “+可以在复制前加上“+复制到系统剪贴板.这样就可以在其他地方粘贴不再局限于vim◆其他一些寄存器比如”% 当前文件名，”. 上次插入的文本如何复制内容到系统剪切板 首先确保vim编译选项里面有clipboard:echo has(‘ clipboard’ ) 查看,若输出1则支持该特性 Commond x放到系统剪切板里面 :set clipboard=unnamed可以让你直接复制粘贴系统剪贴板内容normal模式下可直接使用p进行粘贴.insert模式下粘贴系统剪贴板内容:crlR+服务器上操作vim时没有系统剪切板这时 :e! 重新加载且不保存当前文件 课后练习了解normal/insert模式复制粘贴的方法,常见寄存器的用法◆现在找一段Python代码,尝试在Vim里粘贴进去◆试试你能否将Vim 中的内容复制到系统剪贴板◆尝试在服务器的 Vim.上粘贴下系统剪贴板的内容 从需求说起从一个需求说起,给多行url链接加上双引号,你会怎么做呢?https ://w zhihu . com/ question/ 54919485https://ww. zhihu . com/ explorehttps://ww. zhihu. com/ topichttps://ww. zhi hu . com/ topi c/ 19681388https://ww. zhi hu . com/ topi c/19687351ht tps://aw. zhi hu. com/ t.opi c/ 19630716https ://ww . zhi hu . com/ topic/19637932https://w. zhi hu. com/ pecp1 e/weikexin一67https://w，zhi hu. com/ que sti 0n/267339149/answer/325252706https://w. zhihu . com/question/ 267339149/ answer/5233/1968https://ww. zhi hu. com people/ zhang一jia hoo一 15https :/www zhihu . com question/48510028https :// AWw zhi hu. com/ question/ 267339149/ answer/ 323414411https //ww zhihu. com pepple/ming ming 0701https :/ww zhihu . com/ que stion/ 267 339149/answer/519709724https :// AWw zhihu . com/ question/ 22897152https //ww zhihu. com/question/22130215htps://ww. zhihu . com/question/ 19823813 什么是Vim宏(macro)很多使用Vim很久的Vimer都没用过宏◆宏可以看成是一系列命令的集合◆我们可以使用宏[录制」一系列操作,然后用于「回放J◆宏可以非常方便地把一系列命令用在多行文本上 如何使用宏宏的使用分为录制和回放,是不是有种拍电影的感觉◆Vim使用q来录制,同时也是q结束录制.◆使用q{register}选择要保存的寄存器,把录制的命令保存其中. qa I” esc A” esc q◆使用@{register}回放寄存器中保存的一系列命令. V G 命令行模式回放宏命令 :normal @aqa I” esc A” esc q V G :normal I” :ctrl p A”V G 命令行模式回放宏命令 :normal @a用宏解决刚才的问题现在你知道宏怎么用了,如何解决刚才的问题呢?◆先给一行加上双引号,然后再回放到其他所有行◆我们先使用q开始录制,给一行加上双引号,之后使用q退出◆在剩下的所有行中回放录制的宏 课后练习知道什么是宏,如何使用宏完成日常需求◆想一下你编辑代码或文本的时候什么时候会使用到宏?◆想一下我们还有没有其他方式来完成这个批量加弓|号的编辑需求◆尝试亲自操作一下本章的示例,光听不练可学不会Vim 什么是补全?只要手速快,补全什么的都是浮云◆补全是根据当前环境上下文由编辑器猜你想输入的东西◆比如补全一个单词、文件名,或者代码中的函数名、变量名等◆Vim中提供了多种补全功能,还可以由插件拓展功能实现代码补全 Vim中常见的补全Vim中有很多种补全的方式命令补全类型&lt;C一n&gt;普通关键字&lt;C一x&gt;&lt;C一n&gt;当前缓冲区关键字&lt;C一X&gt;&lt;C一i&gt;包含文件关键字&lt;C一x&gt;&lt;C一]&gt;标签文件关键字&lt;C一x&gt;&lt;C一k&gt;字典查找&lt;C一x&gt;&lt;C一1&gt;整行补全&lt;C一x&gt;&lt;C一 f&gt;文件名补全&lt;C一x&gt;&lt;C一0&gt;， 全能(0mni)补全:filetype on:set filetype常见的三种补全类型记不住不用担心,根据笔者经验,最常用的就三种◆使用ctrl+n和ctrl+p补全单词◆使用ctrl+x ctrl+f补全文件名. 文件路径补全◆使用ctrl+x ctrl+o补全代码,需要开启文件类型检查 ,安装插件 课后练习知道如何在Vim中使用补全,补全的几种常见类型◆尝试使用 Vim中的补全方式来补全单词◆在Vim中输入文件名的时候尝试补全,想想如何输入现有文件名?◆延伸:目前补全都是基于文本匹配的,插件可以实现代码补全 Vim更换配色很多现代化的编辑器和IDE都支持更换主题, Vim当然也可以◆使用:colorscheme显示当前的主题配色,默认是default◆用:colorscheme &lt;ctrl+d&gt; 可以显示所有的配色◆有中意的配色后,用:colorscheme配色名 就可以修改配色Vim a.py b.txt -o 从网上下载配色默认的配色没有喜欢的怎么办?◆从网络上寻找更好看的配色◆https://github.com/flazz/vim一colorschemes◆安装之后就有大量的主题可以更换了 课后练习看着喜欢的配色,敲代码才更舒服◆尝试更改你的 Vim配色方案,想要持久化配置需要写到vimrc中◆在网 上选找一一个你喜欢的配色方案,下载并且使用它,比如hybrid◆你可以下载多个配色到.vim/colors并且随时更换 裸的Vim也很强学Vim之前,先用对打字指法和盲打◆编辑代码,脑子一般比手快,盲打有利于跟上你的大脑速度◆裸的 Vim也有很多强大功能和使用方式◆学会了用Vim ,你可以在你的IDE.上安装Vim插件,几乎所有流行的编辑器和IDE工具都支持Vim插件 如何编写Vim配置文件如何编写自己的Vim配置文件呢?◆Linux/Unix 下新建一个隐藏文件 vim ~/.vimrc. ~表当前用户主目录 .表隐藏文件◆windows系统vim $MYVIMRC ,通过环境变量编辑配置文件◆接着我们就可以开始自定义自己的配置了 Vim配置都包含什么?可以开始编辑vim配置文件了,但是需要设置什么呢?◆常用设置,比如:set nu设置行号, colorscheme hybrid设置主题◆常用的vim映射,比如noremap w :w保存文件◆自定义的vimscript函数(vim高手)和插件的配置(插件篇会讲) 常用设置首先是常用的Vim设置◆&gt;我们可以把常用的设置写到.vimrc里避免每次打开vim重新设置◆比如设置行号set nu;设置主题colorscheme hybird◆Vim里有非常多这种配置,你可能需要参考下别人的配置vimrc文件使用单个的“作为注释1”常用设置设置行号3 set number4 colorscheme hybrid5 “按F2进入粘贴模式6 set pastetoggle=7”高亮搜索8 set hlsearch9” 设置折叠方式10 set fol dmethod=indent1112” 一些方便的映射13 Let mapleader= ‘，14 Let g:mapleader= ‘ ,’1516” 使用j进入normal模式17 inoremap jj ^18 使用leader+w 直接保存19 inoremap w :W20 noremap w :W2122”切换buffer23 nnoremap [b :bprevious24 nnoremap [n : bnext25 use ctrl+h/j/k/l switch windowVISUAL LINE Vim中的映射Vim中的映射比较复杂，源于vim有多种模式◆设置一下leader键let mapleader = “,” 常用的是逗号或空格◆比如用inoremap w :w在插入模式保存inoremap表insert非递归映射◆Vim中的映射概念稍微复杂,但是非常强大,我们下一章单独讲。:source ~/.vimrc 文件生效 编辑vimrc文件时:h option-list /‘number imooc vim:1:zsh 一 “wangningning1 set number2 syntax on4 let mapleader= ‘ ,’5 inoremap w :W: source ~/ . vimrc( imooc _vim)0:zsh一 1 : zsh* 23 nnoremap [b : bprevious24 nnoremap [n : bnext25 use ctrl+h/j/k/l switch window26 noremap &lt;C一h&gt; &lt;C一w&gt;h27 noremap &lt;C一j&gt; &lt;C一w&gt;j28 noremap &lt;C一k&gt; &lt;C 一W&gt;k29 noremap &lt;C一1&gt; &lt;C一w&gt;l3031”Sudo to write32 cnoremap w!! w !sudo tee % &gt;/dev/null33 ”json格式化com! FormatJSON %!python3 一m json. tool3637 “插件设置，这里使用了vim一plug38 call plug#begin( ‘~/ .vim/plugged’)3940 安装插件只需要把github 地址放到这里重启后执行LugInstall就好了41 Plug mhinz/vim一startify’42 Plug ‘ scrooloose/nerdtree ‘4344 call plug#end() Vim脚本Vim有自己的脚本语言Vimscript◆Vim脚本对于Vim高级玩家来说可以实现强大的vim插件◆初学者知道有这个概念就好, vim脚本是一种简单的脚本语言◆可以通过vimscript实现更多vim的控制,开发自己的插件 本章练习掌握Vim配置需要对Vim本身很熟悉,不是一朝一 夕的事情◆尝试自己建立一个.vimrc文件,加入常见的设置选项看看效果◆请你研究 下github.上vim一go教程vim一go一tutorial的vimrc文件◆拿来主义，网_上和很多人开源了自己的配置(dotfiles)可以参考学习通过把vimrc配置放到git版本备库管理可以同步到其他电脑或者服务器上 什么是Vim映射Vim映射就是把一个操作映射到「另一个操作」◆如果你不满现在的按键设置?比如vim本来的命令◆&gt;或者你想映射一些方便的快捷键◆按照你的意愿定制Vim。当我按下某些键时,放弃你默认的操作按我的想法去做」 基本映射基本映射指的是normal模式下的映射,当然还有其他模式的映射◆使用map就可以实现映射。比如:map - x然后按一就会删除字符◆ :map viw告诉vim按下空格的时候选中整个单词:map &lt;c一d&gt; dd可以使用ctrl+d执行dd删除一行.加入vimrc文件时不需再加:vim默认解释为命令模式unmap - 取消映射模式映射Vim常用模式normal/visual/insert都可以定义映射◆用nmap/vmap/imap定义映射只在normal/visual/insert分别有效◆:vmap \\ U把在visual模式下选中的文本大小(u/U转换大小写)◆想想我们如何在insert模式下映射ctrl+d来删除一行? :imap ddi UJLITITULITCIIL1112”一些方便的映射13 let g:mapLeader= ‘,’1415”使用jj进入normal模式16 inoremap jj `^17”使用Leader+w直接保存18 inoremap w :W19 noremap w :W2021 “ 切换buffer22 nnoremap [b : bprevious23 nnoremap [n : bnext 24 “ use ctrl+h/j/k/l switch window25 noremap &lt;C -w&gt;h 现有映射的问题?当你按下\\时, Vim会解释其为-。我们又映射了- Vim会继续解析为dd，即它会删除整行。(是不是有点类似于递归):nmap - dd:nmap \\ - Let mapleader=‘,’ 默认leader键/。inoremap jj ^^回到插入模式上次编辑的地点:help `^递归与非递归映射 map系列命令有递归的风险◆如果你安装了一个插件,插件映射了同一个按键的不同行为, 有冲突就会有一个失效◆想要保证插件映射没有 冲突会非常痛苦◆解决方案就是使用非递归映射 非递归映射Vim提供了非递归映射,这些命令不会递归解释◆使用map对应的nnoremap/vnoremap/inoremap◆何时使用递归映射(map) ?何时使用非递归映射呢? (*nnoremap)◆任何时候你都应该使用非递归映射,拯救自己和插件作者 课后练习映射可以让Vim按照你想要的方式工C作◆尝试在你的vimrc中定义一些映射,提升你的工作效率◆参考下一些开源的vim配置,看看哪些映射可以拿来用◆阅读免费网络小书《笨方法学Vimscript》中关于映射的章节,这是一本学习 vim脚本的非常简单易懂的小书 学习和使用配置学习和使用Vim配置是Vim玩家进阶的必修之路◆了解常见的配置选项◆学习和使用Vim映射,用得不爽我就改◆Vim进阶需要了解Vimscript。《笨方法学Vimscript》 下一步该学什么?该学习强大的Vim插件了◆Vim也在与时俱进,最近发布了Vim8,还有 Neovim◆知道如何配置Vim之后,可以开始探索各种强大的Vim插件了◆这一章打好了基础，我们开始学习如何安装和使用插件 什么是插件?和其他现代流行编辑器一样, Vim同样支持强大的插件扩展◆Vim插件是使用vimscript或者其他语言编写的vim功能扩展◆编辑器自带的功能有限,有了插件之后几乎可以无限制扩充其功能◆网络上比如github.com等有很多开源的vim插件可以使用 如何安装插件?原始的方式是直接clone插件代码,如今vim有很多插件管理器◆目前Vim有很多插件管理器可供选择,你可以选择一个顺手的◆常见的有vim-plug, Vundle, Pathogen, Dein.Vim, volt等◆综合性能、易用性、文档等几个方面,这里推荐使用vim-plug 使用vim一plug安装插件我们将使用vim一plug安装我们的第一个插件◆https://github.com/junegunn/vim-plug◆学习一个新东西的最好方式就是看官方的文档示例◆按照官方的教程,我们就可以非常容易地了解它的使用方式 1415 com! FormatJSON %!python3 一m json. tool16Specify a directory for plugins18 For Neovim: ~/ . local/share/nvim/plugged19 Avoid using standard Vim directory names like ‘ plugin’20 call plug#begin(‘ ~/ .vim/plugged’ )2122” Initialize plugin system23 call plug#end() 安装你的第一个插件我们将安装vim-startify , 一个好用的vim开屏插件◆https://github.com/mhinz/vim-startify◆修改你的.vimrc文件,增加该插件名称◆重新启动vim或者source 一下.vimrc ,执行:PlugInstall:qa退出所有窗口1.安装vim-plug插件管理器 https://github.com/junegunn/vim-plug2.使用vim-plug 和vimrc安装插件 vim /.vimrc call plug#begin(‘/.vim/plugged’) Plug ‘mhinz/vim-startify’ “ Initialize plugin system call plug#end()3.重新启动vim或者source 一下.vimrc ,执行:PlugInstall 安装完成看效果如果你已经安装完成,重新退出并且打开你的vim吧◆重启你的Vim你见过会神奇地发现插件生效了!◆安装一个插件是不是非常简单呢◆其他插件安装方式非常类似 课后练习打开你的Vim操练起来吧，首先下载vim-plug并浏览其文档◆请在你的电脑上安装vim-plug这个方便的插件管理器◆安装你的第一个vim插件vim-startify ,看看能否生效◆下一 章我们将介绍一下如何快速找到你需 要的插件 如何搜寻插件 startify nerdtree python-mode现有需求,后有插件。大部分插件托管在了github上◆通过google搜索关键词寻找想要的插件 vim file manager plugin◆https://vimawesome.com/◆浏览网上开源的vim配置借鉴想要的插件 vim美化插件更改vim的外观◆修改启动界面: https://github.com/mhinz/vim一startify◆状态栏美化: https://github.com/vim一airline/vim一airline◆增加代码缩进线条: https://github.com/yggdroot/indentline vim配色方案找到一个你喜欢的配色◆vim一hybird 配色: github.com/w0ng/vim-hybrid◆solarized 配色: github.com/ altercation/vim一colors一solarized◆gruvbox 配色: github.com/morhetz/gruvbox 课后练习请你尝试安装本章提到的三个插件,然后给自己的vim换个配色◆尝试使用vim一startify快速打开最近的使用的文件◆安装vim一airline美化你的状态栏◆安装indentline给vim增加代码缩进线 文件管理器nerdtree使用nerdtree插件进行文件目录树管理◆https://github.com/scrooloose/nerdtree◆ autocmd vimenter * NERDTree命令粘贴在vimrc可以在启动vim的时候打开◆nnoremap v :NERDTreeFind查找文件位置映射,v跳转到文件在目录树中对应的位置,ctrl w p跳回文件中快速搜索文件如果想快速根据文件名查找打开一个文件呢? 模糊搜索器如果想快速查找并且打开一个文件可以用ctrlp插件◆https://github.com/ctrlpvim/ctrlp.vim◆let g:ctrlp_map = ‘‘◆使用ctrl+ p然后开始输入少量字符就可以搜索啦 课后练习快速定位一个文件是一个常用操作，要好好掌握提升效率◆请你安装nerdtree插件,加入自己的快捷键映射◆安装ctrlp插件,然后尝试下快速定位文件◆改变自己之前低效的操作方式,适应新的操作方式在项目的根目录下可高效操作文件 Vim移动命令在基础篇我们讲了很多vim中移动的命令◆比如w/e基于单词移动,gg/G文件首尾, 0/$行首位,f{char}查寻字符◆ctrl+f ctrl+u前后翻屏◆那假如我想快速跳到当前窗口显示区的任意位置呢? 如何移动到任意位置可以使用vim的搜索/加上n跳转,但是使用easymotion更方便◆https://github.com/easymotion/vim-easymotion◆官方文档比较长,很多人没有看懂怎么用,实一个映射就能应付◆nmap ss (easymotion-s2) vim一surround如果快速让你更换一对单引号为双引号,你会怎么做?◆一个一个查找然后替换,是不是比较低效?◆https://github.com/tpope/vim-surround vim一surround使用normal模式下增加,删除,修改成对内容◆ds (delete a surrounding)◆CS (change a surrounding)◆ys (you add a surrounding) self . name = “name” # ys iw “ print(‘ gua gua’) # cs “ ‘ print[“man gua gua”] # cs ( ] d = Duck( ‘ duck’) # ds ‘课后练习vim一surround大法好◆请你使用vim一plug安装vim一surround插件◆尝试练习使用它来修改成对的内容,比如修改单引号为双引号◆多练习几次,使用插件提升编辑效率,改掉以前的低效操作方式 模糊搜索我们经常需要在一个代码项目中模糊搜索一些文本,怎么办呢?◆Vim自带的搜索/可以搜索当前文件,但是项目有很多个文件◆ 需要一个插件来模糊搜索多个文件内容◆使用Ag.vim或者fzf.vim都可以很好地支持模糊搜索 fzf与fzf.vim. 可完全替代ctrlP插件fzf是一个强大的命令行模糊搜索工具, fzf.vim集成到了vim里◆https://github.com/junegunn/fzf.vim◆使用Ag [PATTERN]模糊搜索字符串 Ag duck map◆使用Files [PATH]模糊搜索目录Files . 搜索替换插件far.vim 打开多个文件如果想要批量搜索替换,可以试试far.vim e ~/.vimrc 在不退出vim情况下编辑vmrc◆https://github.com/brooth/far.vim◆比如在重构代码的时候经常会用到◆:Far foo bar */.py Fardo指定替换的文件,上层目录当前目录*表示所有的文件类型 课后练习模糊搜索和替换是一个非常常用的操作◆请你使用vim一plug安装fzf.vim和far.vim◆尝试使用fzf.vim在一个项目中搜索你想要的文本◆使用far.vim批量替换一个项目下的文本 愉快写golang之vim一go插件 编辑器VS IDEIDE一代又一代,经典的编辑器却长久不衰◆除了Java ,很多人用vim编写shell/php/golang/python/ruby◆前端很多人使用vscode，sublime/Atom 有末落之势◆很多后端和运维工程师使用vim ,微信后台和阿里”飞天系统很多代码出自在服务器上使用vim的工程师 vim一go功能强大的golang插件vim一go◆https://github.com/fatih/vim-go◆代码补全,重构,跳转,自动格式化，自动导入等功能◆基本可以满足golang日常开发Go 默认使用的tab缩进.全能补全ctrl x o 触发。ctrl ]跳至定义处vim里面 ctrl o跳回ctrl i往前跳:GoFmt 代码格式化。 :GoRename 代码重构。:GoImports自动导入 :GoRun运行课后练习安装vim一go插件◆请你安装vim一go插件,阅读vim一go一tutorial教程◆尝试开始使用vim一go插件编写go语言代码◆如果遇到了问题,请你查看vim一go一tutorial教程或者vim一go文档 Python一modePython插件使用比较多的是jedi一vim和python一mode◆https://github.com/python-mode/python-mode◆python一mode同样具备基本的补全、跳转、重构、格式化功能◆即使是在服务器上也能愉快调试python代码了 课后练习安装python一mode插件◆&gt;请你安装python一mode插件◆开始使用python一mode编写Python 代码◆如果遇到了问题,尝试查询python一mode文档解决 tagbar代码大纲, Vim当然也有,而且支持非常多编程语言◆https://github.com/majutsushi/tagbar◆需要安装Universal Ctags生成对应的tag文件◆快速浏览当前文件代码结构,并且搜索跳转到对应代码块 :TagbarToggle vim一interestingwords高亮你感兴趣的单词，浏览代码很有用◆https://github.com/lfv89/vim-interestingwords◆&gt;浏览代码的时候经常需要知道一个变量的使用方式◆我们可以使用这个插件同事高亮多个单词Highlight with kNavigate highlighted words with n and NClear every word highlight with K throughout the buffer 课后练习安装tagbar和interestingwords◆安装tagbar ,开启你的代码大纲吧◆安装interestingwords高亮你感兴趣的单词.◆如果遇到了问题,尝试查询插件的官方文档/google/vim help解决 deoplete.nvim一个强大的neovim/vim8异步补全插件◆https://github.com/shougo/deoplete.nvim◆多编程语言的支持,支持模糊匹配◆需要安装对应编程语言的扩展 coc.vim一个强大的neovim/vim8补全插件。LSP 支持◆https://github.com/neoclide/coc.nvim◆full Language Server Protocol support as VSCode◆多语言插件支持 课后练习尝试安装和使用deoplete.nvim◆安装 deoplete.nvim或者coc.nvim◆安装对应的编程语言扩展◆vim/neovim补全插件有很多,有些支持异步, 找到最适合你的 格式化与静态检查为什么需要这些工具呢?能让工具做的就不用让人去费心◆&gt;把精力集中代码逻辑本身,而不是整理格式这些浪费精力的事情上◆静态检查是为了让编写的代码更加规范。golint/pylint/eslint等◆无论你编写何种编程语言,最好都加上自动格式化和静态检查 Neoformatvim一autoformat和Neoformat是两种使用较多的格式化插件◆你可以按照自己的喜好来选择,这里我们使用neoformat◆https://github.com/sbdchd/neoformat◆需要安装对应语言的格式化库。 python autopep8/js的prettier等 静态检查Lintneomake和ale是两种常用的lint插件,这里我们选用ale◆https://github.com/w0rp/ale◆同样需要安装对应语言的lint库。比如eslint/pylint/golint等◆vim8/neovim 支持异步检查,不会影响vim编辑,推荐使用 课后练习让插件帮你完成代码的格式化和静态检查吧,解放你的生产力◆安装neoformat插件和相关的格式化库,格式化你的代码◆安装ale和对应语言的lint库,修复你代码的缺陷◆需要自定义检查功能 (比如忽略某些检查错误)请参考官方文档 vim一commentaryvim注释插件有很多,这里使用这个比较轻量的◆https://github.com/tpope/vim-commentary◆记住常用的命令gc注释和取消注释◆插件会根据不同的文件类型使用不同注释, python(#) golang(//) 课后练习安装vim一commentary◆安装vim一commentary插件◆尝试打开一个python文件快速注释一段代码◆打开不同类型文件，比如go文件试试注释一段代码或者文字 Fugitive在Vim里使用Git◆https://github.com/tpope/vim-fugitive◆Gedit, Gdif, Gblame, Gcommit等◆笔者更喜欢用tmux新开一个窗口来使用git ,后面我们会讲到 vim一gitgutter在vim里显示文件变动◆https://github.com/airblade/vim-gitgutter◆当我们修改文件之后可以显示当前文件的变动◆哪些行新增,哪些行修改了,哪些行删除了 gv.vim如何在命令行查看提交记录呢?有个命令行工具叫做tig◆https://github.com/junegunn/gv.vim◆使用:GV命令调用◆可以浏览代码提交变更 课后练习安装这三个git插件◆尝试安装这几个git插件◆使用下Gblame等命令◆后面我们会讲vim和tmux配合使用 Vim插件千3万本章我们介绍了如何安装和使用常见的插件◆Vim插件很多,不可能都全部介绍。学会自己寻找和安装◆通过搜索引擎google关键词/vimawesome/参考 开源配置寻找插件◆学会阅读插件的 Readme文件和doc里的帮助文件学习插件使用 1「mux强大的终端复用工具。通过brew(mac) apt一get(ubuntu)安装◆可以复用终端、分屏、托管进程等◆在服务器上即使退出服务器也不会被kill ,托管进程也很方便◆可以方便地分割屏幕实现多个进程公用屏幕 T ‘mux强大的终端复用工具。通过brew(mac) apt一get(ubuntu)安装◆可以复用终端、分屏、托管进程等◆在服务器上即使退出服务器也不会被kill ,托管进程也很方便◆可以方便地分割屏幕实现多个进程公用屏幕 课后练习在你的系统或者服务器.上安装tmux◆使用tmux尝试分隔屏幕◆尝试一个窗口编写代码, 一个窗口使用shell命令◆尝试退出和重新attach到一个tmux的会话 几乎流行的编辑器和IDE都支持vim插件让vim嵌入你的开发工具,甚至chrome都有vimium插件◆即使你不用vim作为主力编辑器,依然可以使用它的编辑方式◆几乎流行的开发工具都支持vim插件,以vim的方式编辑.◆比如Vscode/Atom/Pycharm等都支持安装vim插件 课后练习如果你使用的不是vim ,请寻找对应的vim插件安装◆搜索你的开发工具的vim插件◆安装vim插件到你的开发工具里◆尝试在各种开发工 具中使用vim的方式编辑提升效率 Neovim一个新的vim版本支持异步特性( vim8也支持)◆https://neovim.io/◆开发更活跃,更丰富的特性和扩展,异步支持◆neovim的设计可以嵌入到很多GUI里,加上好看的「外壳J 开箱即用如果你已经熟悉了vim配置,可以从网上直接使用一些开源配置◆https://github.com/SpaceVim/SpaceVim◆https://github.com/PegasusWang/vim一config◆其他开源配置。不推荐新手直接使用,越复杂的配置上手成本越高 课后练习找到一个你喜欢的开源配置◆找到一个你喜欢的开源配置,尝试安装它◆阅读其文档，了解使用方式。一般开源配置都安装了很多插件◆对于新手来说,配置太复杂太强大有时候可能会出现很多小问题 学习万法熟练vim靠的是肌肉记忆。脱离鼠标编辑能提升编辑效率◆虽然讲了这么多, vim仍然很多东西没有讲,时不时发现一些技巧◆在学中练,在练中学。熟能生巧,肌肉记忆◆衡量投入产出比,是点到为止还是继续深入 继续练级网络.上很多vim的资源,甚至练习的小游戏◆《Practical vim》◆《举方法学 vimscript》◆学习和开发自己的插件","link":"/2020/01/25/vim笔记/"}],"tags":[],"categories":[]}